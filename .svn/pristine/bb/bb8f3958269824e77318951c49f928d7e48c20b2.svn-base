package com.rjkx.sk.manager.basedata.controller;

import java.io.File;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.rjkx.sk.admin.common.utils.BasicUtils;
import com.rjkx.sk.itf.weixin.utils.WeiXinTokenThread;
import com.rjkx.sk.itf.weixin.utils.WeiXinUtils;
import com.rjkx.sk.manager.base.ManagerBaseController;
import com.rjkx.sk.manager.basedata.service.DoctorService;
import com.rjkx.sk.system.datastructure.Dto;
import com.rjkx.sk.system.json.JsonHelper;
import com.rjkx.sk.system.utils.FredaUtils;
import com.rjkx.sk.system.utils.SystemCons;

/***
 * 医生管理
 * 
 * @ClassName: DoctorController
 * @Description:
 * @author yiyuan-LiChun
 * @date 2016年2月11日 上午9:30:40
 * @version V2.0
 */
@Controller
@RequestMapping(value = "/doctorv2")
public class DoctorV2Controller extends ManagerBaseController {
	@Autowired
	@Resource(name = "doctorV2ServiceImpl")
	private DoctorService doctorService;

	/**
	 * LIST 医生
	 * 
	 * @author lichun
	 * @date
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/listDoctor")
	public String listDoctor(HttpServletRequest request, HttpServletResponse response) throws Exception {
		Dto pDto = super.getParamsAsDto(request);

		List<?> data = super.getFredaReader().queryForList("DoctorV2.listDoctor", pDto);

		super.write("{\"ROOT\":" + JsonHelper.encodeObject2Json(data, SystemCons.DATE_TIME_FORMART) + "}", response);

		return null;
	}

	/**
	 * 添加 医生
	 * 
	 * @author lichun
	 * @date
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/addDoctor")
	public String addDoctor(HttpServletRequest request, HttpServletResponse response) throws Exception {
		this.doctorService.addDoctor(super.getParamsAsDto(request));

		super.setOkTipMsg(SystemCons.TIPS_SUCCESS_MSG, response);

		return null;
	}

	/**
	 * EDIT 医生
	 * 
	 * @author lichun
	 * @date
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/editDoctor")
	public String editDoctor(HttpServletRequest request, HttpServletResponse response) throws Exception {
		this.doctorService.editDoctor(super.getParamsAsDto(request));

		super.setOkTipMsg(SystemCons.TIPS_SUCCESS_MSG, response);

		return null;
	}

	/**
	 * DELETE 医生
	 * 
	 * @author lichun
	 * @date
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/delDoctor")
	public String delDoctor(HttpServletRequest request, HttpServletResponse response) throws Exception {
		this.doctorService.delDoctor(super.getParamsAsDto(request));

		super.setOkTipMsg(SystemCons.TIPS_SUCCESS_MSG, response);

		return null;
	}

	/**
	 * 查询单条医生信息
	 * 
	 * @author lichun
	 * @date
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/getDoctor")
	public String getDoctor(HttpServletRequest request, HttpServletResponse response) throws Exception {

		Dto pDto = super.getParamsAsDto(request);

		Dto data = (Dto) super.getFredaReader().queryForObject("DoctorV2.getDoctor", pDto);

		super.write(JsonHelper.encodeObject2Json(data, SystemCons.DATE_TIME_FORMART), response);

		return null;
	}

	@RequestMapping(value = "/uploadPhoto")
	public String uploadPhoto(HttpServletRequest request, HttpServletResponse response) throws Exception {
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;

		CommonsMultipartFile file = (CommonsMultipartFile) multipartRequest.getFile("fileIcon");
		String fileLastName = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."), file.getOriginalFilename().length());
		if (BasicUtils.isImg(fileLastName)) {
			String newFileName = "/doctor_" + System.nanoTime();
			String dateDir = "/" + FredaUtils.getCurDate();
			String realPath = appProperties.getValue("app.doctor.photo.dir");
			File filePath = new File(realPath + dateDir);
			if (!filePath.exists()) {
				filePath.mkdirs();
			}
			File outFile = new File(realPath + dateDir + newFileName + fileLastName);

			FileCopyUtils.copy(file.getBytes(), outFile);
			super.setOkTipMsg(appProperties.getValue("app.doctor.photo.saveDir") + dateDir + newFileName + fileLastName, response);
		} else {
			super.setErrTipMsg(SystemCons.TIPS_ERROR_FILE_TYPE_MSG, response);
		}
		return null;
	}

	/**
	 * EDIT 医生二维码
	 * 
	 * @author lichun
	 * @date
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/updateDoctorQrcode")
	public String updateDoctorQrcode(HttpServletRequest request, HttpServletResponse response) throws Exception {
		Dto pDto = super.getParamsAsDto(request);

		String ticket = WeiXinUtils.createQRCodeTicket(WeiXinTokenThread.ACCESS_TOKEN, "QR_SCENE", pDto.getAsInteger("docId"));
		if (ticket.length() > 0) {
			String fileName = System.nanoTime() + ".jpg";
			if (WeiXinUtils.getQRCodeForTicket(ticket, appProperties.getValue("app.doctor.qrcode.dir"), fileName)) {
				pDto.put("docQrcode", appProperties.getValue("app.doctor.qrcode.saveDir") + fileName);
				this.doctorService.editDoctorQrcode(pDto);
				super.setOkTipMsg(SystemCons.TIPS_SUCCESS_MSG, response);
			} else {
				super.setOkTipMsg(SystemCons.TIPS_ERROR_MSG, response);
			}
		}

		return null;
	}
}
