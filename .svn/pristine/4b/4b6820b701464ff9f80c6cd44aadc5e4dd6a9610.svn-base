package com.rjkx.sk.itf.weixin.utils;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.net.ssl.HttpsURLConnection;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.rjkx.sk.itf.weixin.pojo.BaseMenu;
import com.rjkx.sk.itf.weixin.pojo.ButtonMenu;
import com.rjkx.sk.itf.weixin.pojo.ComplexMenu;
import com.rjkx.sk.itf.weixin.pojo.Menu;
import com.rjkx.sk.itf.weixin.pojo.Token;
import com.rjkx.sk.itf.weixin.pojo.ViewMenu;
import com.rjkx.sk.system.datastructure.Dto;
import com.rjkx.sk.system.json.JsonHelper;
import com.rjkx.sk.system.utils.FredaUtils;

/**
 * 微信公众平台工具类
 * 
 * @author rally
 *
 */
public class WeiXinUtils {
	private static final Log log = LogFactory.getLog(WeiXinUtils.class);
	/*创建菜单*/
	private static final String CREATE_MENU_URL="https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN";
	/*删除菜单*/
	private static final String DELETE_MENU_URL="https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=ACCESS_TOKEN";
	/*获取Token*/
	private final static String TOKEN_URL = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET";
	/*微信获取用户列表发送URL*/
	public static final String GET_USERLIST_URL="https://api.weixin.qq.com/cgi-bin/user/get?access_token=ACCESS_TOKEN&next_openid=NEXT_OPENID";
	/*微信模板消息发送URL*/
	public static final String TEMPLATEMESSAGE_SEND_URL="https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=ACCESS_TOKEN";
	/*获取用户基本信息*/
	public static final String GET_USERINFO_URL="https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&openid=OPENID&lang=zh_CN";
	/*发送客服消息*/
	public static final String KF_SEND_URL="https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=ACCESS_TOKEN";
	
	private static volatile int num = 1; 

	/**
	 * 微信token校验
	 * 
	 * @param request
	 * @param token
	 * @return
	 */
	public static String checkToken(HttpServletRequest request) {
		String signature = request.getParameter("signature");

		String timestamp = request.getParameter("timestamp");

		String nonce = request.getParameter("nonce");

		String echostr = request.getParameter("echostr");

		log.info("signature : " + signature);
		log.info("timestamp : " + timestamp);
		log.info("nonce : " + nonce);
		log.info("echostr : " + echostr);

		return checkToken(signature, timestamp, nonce, echostr, WeiXinCons.WX_TOKEN);
	}

	/**
	 * 微信token校验
	 * 
	 * @param signature
	 * @param timestamp
	 * @param nonce
	 * @param echostr
	 * @param token
	 * @return
	 */
	public static String checkToken(String signature, String timestamp, String nonce, String echostr, String token) {
		if (FredaUtils.isNotEmpty(signature) && FredaUtils.isNotEmpty(timestamp) && FredaUtils.isNotEmpty(nonce)
				&& FredaUtils.isNotEmpty(echostr) && FredaUtils.isNotEmpty(token)) {
			StringBuilder sb = new StringBuilder();

			String[] tmp = { token, timestamp, nonce };

			Arrays.sort(tmp);

			for (String s : tmp) {
				sb.append(s);
			}
			String pwd = WeiXinMessageDigestUtils.getInstance().encipher(sb.toString());

			if (signature.equals(pwd)) {
				log.info("验证成功..允许接入!");

				return echostr;
			}
		}
		log.info("验证失败..拒绝接入!");
		return null;
	}

	/**
	 * 获取access_token
	 * 
	 * @return
	 */
	public static String getAccessToken() {
		String access_token = null;

		try {
//			String url = "https://api.weixin.qq.com/cgi-bin/token?grant_type=" + WeiXinCons.WX_GRANT_TYPE + "&appid="+ WeiXinCons.WX_APP_ID + "&secret=" + WeiXinCons.WX_APP_SECRET;
			String requestUrl = TOKEN_URL.replace("APPID", WeiXinCons.WX_APP_ID).replace("APPSECRET", WeiXinCons.WX_APP_SECRET);
			access_token = JsonHelper.parseSingleJson2Dto(WeiXinHttpUtils.get(requestUrl)).getAsString("access_token");
		} catch (Exception e) {
			e.printStackTrace();
		}
		log.info("获取ACCESS_TOKEN成功!");

		return access_token;
	}

	/**
	 * 获取Js_ticket
	 * 
	 * @return
	 */
	public static String getJsTicket(String token) {
		String js_ticket = null;

		try {
			String url = "https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=" + token + "&type=jsapi";
			js_ticket = JsonHelper.parseSingleJson2Dto(WeiXinHttpUtils.get(url)).getAsString("ticket");
		} catch (Exception e) {
			e.printStackTrace();
		}
		log.info("获取JS_TICKET成功!");

		return js_ticket;
	}

	/**
	 * 获取jsapi相关map
	 * 
	 * @param jsapi_ticket
	 * @param url
	 * @return
	 */
	public static Map<String, String> getJsSignMap(String jsapi_ticket, String url) {
		Map<String, String> map = new HashMap<String, String>();

		String nonce_str = UUID.randomUUID().toString();
		String timestamp = Long.toString(System.currentTimeMillis() / 1000);
		String s = "jsapi_ticket=" + jsapi_ticket + "&noncestr=" + nonce_str + "&timestamp=" + timestamp + "&url="
				+ url;
		String signature = WeiXinMessageDigestUtils.getInstance().encipher(s);

		map.put("url", url);
		map.put("jsapi_ticket", jsapi_ticket);
		map.put("nonceStr", nonce_str);
		map.put("timestamp", timestamp);
		map.put("signature", signature);

		log.info("MAP中的参数:");
		log.info("url : " + url);
		log.info("jsapi_ticket : " + jsapi_ticket);
		log.info("nonceStr : " + nonce_str);
		log.info("timestamp : " + timestamp);
		log.info("signature : " + signature);

		return map;
	}

	/**
	 * 创建指定数量的随机字符串
	 * 
	 * @param numberFlag
	 *            是否是数字
	 * @param length
	 * @return
	 */
	public static String createRandom(boolean numberFlag, int length) {
		String retStr = "";
		String strTable = numberFlag ? "1234567890" : "1234567890abcdefghijkmnpqrstuvwxyz";
		int len = strTable.length();
		boolean bDone = true;
		do {
			retStr = "";
			int count = 0;
			for (int i = 0; i < length; i++) {
				double dblR = Math.random() * len;
				int intR = (int) Math.floor(dblR);
				char c = strTable.charAt(intR);
				if (('0' <= c) && (c <= '9')) {
					count++;
				}
				retStr += strTable.charAt(intR);
			}
			if (count >= 2) {
				bDone = false;
			}
		} while (bDone);

		return retStr;
	}
	/**
	 * 根据code获取openid
	 * @param code
	 * @return
	 * @throws IOException
	 */
	public static String getOpenID(String code) throws IOException{
		String url = WeiXinCons.WX_BASE_API_URL + "sns/oauth2/access_token?appid=" + WeiXinCons.WX_APP_ID + "&secret=" + WeiXinCons.WX_APP_SECRET + "&code=" + code + "&grant_type=authorization_code";
		JSONObject josnObject = JSONObject.parseObject(WeiXinHttpUtils.httpsRequest(url, null));
		if(josnObject != null){
			return josnObject.getString("openid");
			
		}else{
			return null;
		}
	}
	/**
	 * 根据code获取accesstoken
	 * @param code
	 * @return
	 * @throws IOException
	 */
	public static String getAccessToken(String code) throws IOException{
		String url = WeiXinCons.WX_BASE_API_URL + "sns/oauth2/access_token?appid=" + WeiXinCons.WX_APP_ID + "&secret=" + WeiXinCons.WX_APP_SECRET + "&code=" + code + "&grant_type=authorization_code";
		JSONObject josnObject = JSONObject.parseObject(WeiXinHttpUtils.httpsRequest(url, null));
		if(josnObject != null){
			return josnObject.getString("access_token");
		}else{
			return null;
		}
	}
	
	/**
	 * 格式化时间月日
	 * @param date
	 * @return
	 */
	public static String formatDateTimeToMd(Date date){
		
		SimpleDateFormat time=new SimpleDateFormat("MM/dd");
		
		return time.format(date);
		
		
	}
	/**
	 * 格式化时间十分
	 * @param date
	 * @return
	 */
	public static String formatDateTimeToHm(Date date){
		
		SimpleDateFormat time=new SimpleDateFormat("HH:mm");
		
		return time.format(date);
		
		
	}
	/**
	 * 格式化时间星期
	 * @param dt
	 * @return
	 */
	public static String getWeekOfDate(Date dt) {
        String[] weekDays = {"周日", "周一", "周二", "周三", "周四", "周五", "周六"};
        Calendar cal = Calendar.getInstance();
        cal.setTime(dt);
        int w = cal.get(Calendar.DAY_OF_WEEK) - 1;
        if (w < 0)
            w = 0;
        return weekDays[w];
    }
	
	public static int getNum()
	{
		if(num > 99999)
			num = 1;
		return num++;
	}
	
	/***
	 * 创建带参数的二维码ticket
	  * 
	  * @author yiyuan-LiChun
	  * @date 2016年2月20日 下午3:56:42
	  * @param accessToken
	  * @param action_name
	  * @param sceneId
	  * @return
	 */
	public static String createQRCodeTicket(String accessToken,String action_name,int sceneId){
		String sRet="";
		String requestUrl="https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token="+accessToken;
		
		String param="{\"expire_seconds\":604800,\"action_name\":\"QR_SCENE\",\"action_info\":{\"scene\":{\"scene_id\": 123}}}}";
		Dto dto=JsonHelper.parseSingleJson2Dto(WeiXinHttpUtils.post(requestUrl, param));
		if(FredaUtils.isEmpty(dto.getAsString("ticket"))){
			return sRet;
		}
		sRet=dto.getAsString("ticket");
		
		return sRet;
	}
	
	/***
	 * 根据ticket获取二维码文件
	  * 
	  * @author yiyuan-LiChun
	  * @date 2016年2月20日 下午4:14:33
	  * @param ticket
	  * @param saveFilePath
	  * @return
	 */
	public static boolean getQRCodeForTicket(String ticket,String saveFilePath,String fileName){
		boolean bRet=false;
		String requestUrl="https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket="+ticket;
		URL url=null;
		HttpsURLConnection conn=null;
		try{
			url=new URL(requestUrl);
			conn=(HttpsURLConnection)url.openConnection();
			conn.setDoInput(true);
			conn.setRequestMethod("GET");
			if(!saveFilePath.endsWith("/"))
				saveFilePath+="/";
			String filePath=saveFilePath+fileName;
			
			BufferedInputStream bis=new BufferedInputStream(conn.getInputStream());
			FileOutputStream fos=new FileOutputStream(new File(filePath));
			byte[] buf=new byte[8096];
			int size=0;
			while((size=bis.read(buf))!=-1){
				fos.write(buf, 0, size);
			}
			fos.close();
			bis.close();
			fos=null;
			bis=null;
			bRet=true;
		}catch(Exception e){
		}finally{
			if(conn!=null){
				conn.disconnect();
				conn=null;
			}
			if(url!=null){
				url=null;
			}
		}
		return bRet;
	}
	
	/***
	 * 创建菜单
	  * 
	  * @author yiyuan-LiChun
	  * @date 2016年2月21日 下午8:05:47
	  * @param accessToken
	  * @return
	 */
	public static boolean createMenu(String accessToken){
		if(!deleteMenu(accessToken)){
			return false;
		}
		ViewMenu vm1=new ViewMenu();
		vm1.setType(BaseMenu.VIEW_TYPE);
		vm1.setName("骨科医愿");
		vm1.setUrl("https://open.weixin.qq.com/connect/oauth2/authorize?appid="+WeiXinCons.WX_APP_ID+"&redirect_uri="+WeiXinCons.WX_SAFE_DOMAIN+"/WxPro/wx/gkyy_home.jsp&response_type=code&scope=snsapi_base&state=STATE#wechat_redirect");
		
		ViewMenu vm21=new ViewMenu();
		vm21.setType(BaseMenu.VIEW_TYPE);
		vm21.setName("精准预约");
		vm21.setUrl("https://open.weixin.qq.com/connect/oauth2/authorize?appid="+WeiXinCons.WX_APP_ID+"&redirect_uri="+WeiXinCons.WX_SAFE_DOMAIN+"/WxPro/wx/ghyy_doclist.jsp?schType=1&response_type=code&scope=snsapi_base&state=STATE#wechat_redirect");
		ViewMenu vm22=new ViewMenu();
		vm22.setType(BaseMenu.VIEW_TYPE);
		vm22.setName("VIP会诊");
		vm22.setUrl("https://open.weixin.qq.com/connect/oauth2/authorize?appid="+WeiXinCons.WX_APP_ID+"&redirect_uri="+WeiXinCons.WX_SAFE_DOMAIN+"/WxPro/wx/ghyy_vipcon.jsp&response_type=code&scope=snsapi_base&state=STATE#wechat_redirect");
		ComplexMenu vm2=new ComplexMenu();
		vm2.setName("找对医生");
		vm2.setSub_button(new BaseMenu[]{vm21,vm22});
		
		ViewMenu vm31=new ViewMenu();
		vm31.setType(BaseMenu.VIEW_TYPE);
		vm31.setName("健康课堂");
		vm31.setUrl("https://open.weixin.qq.com/connect/oauth2/authorize?appid="+WeiXinCons.WX_APP_ID+"&redirect_uri="+WeiXinCons.WX_SAFE_DOMAIN+"/WxPro/wx/myjt_list.jsp&response_type=code&scope=snsapi_base&state=STATE#wechat_redirect");
		ViewMenu vm32=new ViewMenu();
		vm32.setType(BaseMenu.VIEW_TYPE);
		vm32.setName("骨科动态");
		vm32.setUrl("http://mp.weixin.qq.com/mp/getmasssendmsg?__biz=MzI0ODExOTU1NA==#wechat_webview_type=1&wechat_redirect");
		ViewMenu vm33=new ViewMenu();
		vm33.setType(BaseMenu.VIEW_TYPE);
		vm33.setName("个人中心");
		vm33.setUrl("https://open.weixin.qq.com/connect/oauth2/authorize?appid="+WeiXinCons.WX_APP_ID+"&redirect_uri="+WeiXinCons.WX_SAFE_DOMAIN+"/WxPro/wx/grzx_home.jsp&response_type=code&scope=snsapi_base&state=STATE#wechat_redirect");
		ButtonMenu vm34=new ButtonMenu();
		vm34.setType(BaseMenu.BUTTON_TYPE);
		vm34.setName("在线客服");
		vm34.setKey("online");
		ComplexMenu vm3=new ComplexMenu();
		vm3.setName("医愿服务");
		vm3.setSub_button(new BaseMenu[]{vm31,vm32,vm33,vm34});
		
		Menu menu=new Menu();
		menu.setButton(new BaseMenu[]{vm1,vm2,vm3});
		
		String jsonString=JsonHelper.encodeObject2Json(menu);
		String requestUrl = CREATE_MENU_URL.replace("ACCESS_TOKEN", accessToken);
		String sRet=WeiXinHttpUtils.httpsRequest(requestUrl, jsonString);
		JSONObject jsonObject=JSONObject.parseObject(sRet);
		if(jsonObject!=null){
			if(jsonObject.getIntValue("errcode")==0)
				return true;
			else{
				log.error("创建菜单失败：errcode:"+jsonObject.getIntValue("errcode")+",errmsg:"+jsonObject.getString("errmsg"));
				return false;
			}
		}else{
			return false;
		}
	}
	
	/***
	 * 删除菜单
	  * 
	  * @author yiyuan-LiChun
	  * @date 2016年2月21日 下午8:27:04
	  * @param accessToken
	  * @return
	 */
	public static boolean deleteMenu(String accessToken){
		String requestUrl = DELETE_MENU_URL.replace("ACCESS_TOKEN", accessToken);
		String sRet=WeiXinHttpUtils.httpsRequest(requestUrl, null);
		JSONObject jsonObject=JSONObject.parseObject(sRet);
		if(jsonObject!=null){
			if(jsonObject.getIntValue("errcode")==0)
				return true;
			else{
				log.error("删除菜单失败：errcode:"+jsonObject.getIntValue("errcode")+",errmsg:"+jsonObject.getString("errmsg"));
				return false;
			}
		}else{
			return false;
		}
	}

	/***
	 * 根据经纬度获取地市
	  * 
	  * @author yiyuan-LiChun
	  * @date 2016年2月20日 下午4:15:05
	  * @param latitude
	  * @param longitude
	  * @return
	  * @throws IOException
	 */
	public static String getLocationCityId(String latitude,String longitude) throws IOException{
		String url="http://api.map.baidu.com/geocoder/v2/?ak=t5rMjAYUtTma2RbFinDnG07t&callback=renderReverse&location="+latitude+","+longitude+"&output=json&pois=1";
		String jsonstring=WeiXinHttpUtils.get(url);
		JSONObject jsonobj=JSONObject.parseObject(jsonstring);
		String city = jsonobj.getJSONObject("addressComponent").get("city").toString();
		
		return city;
	}
	
	/***
	 * 根据手机号获取归属地城市
	  * 
	  * @author yiyuan-LiChun
	  * @date 2016年2月20日 下午4:15:43
	  * @param mobile
	  * @return
	  * @throws IOException
	 */
	public static String getMobileInfo(String mobile) throws IOException{
		String url="http://apis.juhe.cn/mobile/get?phone="+mobile+"&key=67b74243fab5fe138f81f0487e8e0685";
		String jsonstring=WeiXinHttpUtils.get(url);
		JSONObject jsonobj=JSONObject.parseObject(jsonstring);
		String city = jsonobj.getJSONObject("result").get("city").toString();
		if(city.indexOf("市")<0){
			city+="市";
		}
		return city;
	}
	
	/**
	 * 获取接口访问凭证
	 * 
	 * @param appid 凭证
	 * @param appsecret 密钥
	 * @return
	 */
	public static Token getToken(String appid, String appsecret) {
		Token token = null;
		String requestUrl = TOKEN_URL.replace("APPID", appid).replace("APPSECRET", appsecret);
		// 发起GET请求获取凭证
		JSONObject jsonObject = JSONObject.parseObject(WeiXinHttpUtils.httpsRequest(requestUrl,null));

		if (null != jsonObject) {
			try {
				token = new Token();
				token.setAccessToken(jsonObject.getString("access_token"));
				token.setExpiresIn(jsonObject.getIntValue("expires_in"));
			} catch (JSONException e) {
				token = null;
				// 获取token失败
				Logger log1 = LoggerFactory.getLogger(WeiXinUtils.class);
				log1.error("获取token失败 errcode:{} errmsg:{}", jsonObject.getInteger("errcode"), jsonObject.getString("errmsg"));
			}
		}
		return token;
	}
	
	/***
	 * 获取用户列表
	  * 
	  * @author yiyuan-LiChun
	  * @date 2016年2月22日 下午7:17:37
	  * @param accessToken
	  * @param nextOpenId
	  * @return
	 */
	public static String getUserList(String accessToken,String nextOpenId){
		return WeiXinHttpUtils.httpsRequest(WeiXinUtils.GET_USERLIST_URL.replace("ACCESS_TOKEN", accessToken).replace("NEXT_OPENID", nextOpenId), null);
	}
	
	/***
	 * 获取用户基本信息
	  * 
	  * @author yiyuan-LiChun
	  * @date 2016年2月22日 下午7:18:00
	  * @param accessToken
	  * @param nextOpenId
	  * @return
	 */
	public static String getUserInfo(String accessToken,String openId){
		return WeiXinHttpUtils.httpsRequest(WeiXinUtils.GET_USERINFO_URL.replace("ACCESS_TOKEN", accessToken).replace("OPENID", openId), null);
	}

	/***
	 * 发送客服消息
	  * 
	  * @author yiyuan-LiChun
	  * @date 2016年2月25日 下午12:38:27
	  * @param accessToken
	  * @param msg
	  * @return
	 */
	public static boolean sendKfMsg(String accessToken,String msg){
		String requestUrl = KF_SEND_URL.replace("ACCESS_TOKEN", accessToken);
		String sRet=WeiXinHttpUtils.httpsRequest(requestUrl, msg);
		JSONObject jsonObject=JSONObject.parseObject(sRet);
		if(jsonObject!=null){
			if(jsonObject.getIntValue("errcode")==0)
				return true;
			else{
				log.error("发送客服失败：errcode:"+jsonObject.getIntValue("errcode")+",errmsg:"+jsonObject.getString("errmsg"));
				return false;
			}
		}else{
			return false;
		}
	}
	
	/***
	 * 发送模板消息
	  * 
	  * @author yiyuan-LiChun
	  * @date 2016年2月25日 下午12:38:44
	  * @param accessToken
	  * @param msg
	  * @return
	 */
	public static boolean sendTemplateMsg(String accessToken,String msg){
		String requestUrl = TEMPLATEMESSAGE_SEND_URL.replace("ACCESS_TOKEN", accessToken);
		String sRet=WeiXinHttpUtils.httpsRequest(requestUrl, msg);
		JSONObject jsonObject=JSONObject.parseObject(sRet);
		if(jsonObject!=null){
			if(jsonObject.getIntValue("errcode")==0)
				return true;
			else{
				log.error("发送模板消息失败：errcode:"+jsonObject.getIntValue("errcode")+",errmsg:"+jsonObject.getString("errmsg"));
				return false;
			}
		}else{
			return false;
		}
	}
}
